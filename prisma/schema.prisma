// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique 
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[]
  comments Comment[]
  likes Like[]
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
  notification Notification[] @relation("userNotification")
  notificationCreated Notification[] @relation("notificationCreator")
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  image     String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id         String  @id @default(cuid())
  followerId String
  followingId String
  follower   User @relation("follower", fields: [followerId], references: [id])
  following  User @relation("following", fields: [followingId], references: [id])
  createdAt  DateTime @default(now())
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("userNotification", fields: [userId], references: [id])
  creatorId  String
  creator    User     @relation("notificationCreator", fields: [creatorId], references: [id])
  type       String
  content    String?
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}