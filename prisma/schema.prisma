
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique 
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts Post[] 
  comments Comment[]
  likes Like[]
  followers Follow[] @relation("follower")
  following Follow[] @relation("following")
  notification Notification[] @relation("userNotification")
  notificationCreated Notification[] @relation("notificationCreator")
  taggedUser TaggedUser[]
  Reel Reel[]
  Status Status[]
  viewers Viewer[] @relation("UserViewers")
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  image     String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
  notification Notification[]
  taggedUser TaggedUser[]
}

model Reel {
  id        String   @id @default(cuid())
  content   String?
  videoUrl     String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
  notification Notification[]
}

model TaggedUser {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([userId,postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  autorId    String
  author      User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  reelId    String?
  reel      Reel?     @relation(fields: [reelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Like Like[]
  notification Notification[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reelId    String?
  reel      Reel?    @relation(fields: [reelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([userId,postId,commentId])
  Notification Notification[]
}

model Follow {
  id         String  @id @default(cuid())
  followerId String
  followingId String
  follower   User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following  User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  @@index([followerId,followingId])
}

model Status {
  id        String   @id @default(cuid())
  authorId    String
  image     String?
  text     String?
  song     String?
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  viewersIds Viewer[]
  createdAt DateTime @default(now())
}
model Viewer{
  id String @id @default(cuid())
  userId String
  statusId String?
  user User @relation("UserViewers", fields: [userId], references: [id], onDelete: Cascade)
  status Status? @relation(fields: [statusId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([userId,statusId])
}


model Notification {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("userNotification", fields: [userId], references: [id])
  creatorId  String
  creator    User     @relation("notificationCreator", fields: [creatorId], references: [id])
  type       NotificationType
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  postId String?
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likeId String?
  like Like? @relation(fields: [likeId], references: [id], onDelete: Cascade)
  reelId String?
  reel Reel? @relation(fields: [reelId], references: [id], onDelete: Cascade)
  @@index([userId,createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  TAG
  STATUS
}